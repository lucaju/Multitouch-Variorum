package view.assets.scroll {		//imports		import com.greensock.BlitMask;	import com.greensock.TweenLite;	import com.greensock.TweenMax;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.geom.Rectangle;		import view.assets.scroll.Roll;
		public class Scroll extends Sprite{				//properties		private var _target:Sprite;		private var _mask:BlitMask;		private var _hMaxView:Number = 0;		private var _ratePage:Number;		private var _prev_mouse_pos:Point = new Point(0,0);		private var _speed:Point = new Point(0,0);		private var roll:Roll;		private var track:Track;				public function Scroll() {						// track			track = new Track();			addChild(track);									// Roll			roll = new Roll();			addChild(roll);						this.addEventListener(Event.ADDED_TO_STAGE, addedToStageHandler);					}				//getters				//setters		public function set target(value:Sprite):void {			_target = value;			if (_hMaxView != 0) {ratePage()}		}				public function set maskContainer(value:BlitMask):void {			_mask = value;			_hMaxView = _mask.height;			if (_target != null) {ratePage()}		}				private function ratePage():void {			_ratePage = _target.height / _mask.height;			scrollSize();		}				public function getRatePage():Number {			return _ratePage;		}				private function scrollSize():void {			//if (_ratePage < 10) {				roll.height = _hMaxView / _ratePage;				track.height = _hMaxView;			//}		}				private function addedToStageHandler(e:Event):void{						this.parent.addEventListener(MouseEvent.MOUSE_WHEEL, scrollList);		//Mouse Wheel active in the whole list area						roll.addEventListener(MouseEvent.MOUSE_DOWN, drag);						//Mouse Down active on the roll						stage.addEventListener(MouseEvent.MOUSE_UP, stop);						//Mouse Up wherever						track.addEventListener(MouseEvent.CLICK, trackClick);					//Mouse Clicked on track		}				public function removeHandlers():void {			this.parent.removeEventListener(MouseEvent.MOUSE_WHEEL, scrollList);		//Mouse Wheel active in the whole list area						roll.removeEventListener(MouseEvent.MOUSE_DOWN, drag);						//Mouse Down active on the roll						stage.removeEventListener(MouseEvent.MOUSE_UP, stop);						//Mouse Up wherever						track.removeEventListener(MouseEvent.CLICK, trackClick);					//Mouse Clicked on track		}				private function scrollList(e:MouseEvent):void {			TweenMax.killAll();			//_mask.enableBitmapMode();						roll.alpha = 1;			track.alpha = 1;						var speed:Number = e.delta * 14;														//define scroll speed			var yPosition:Number; 																//define final position 						//boundaries			if(_target.y + speed > 0) {															//Top				_target.y = 0;			} else if(_target.y  + speed < -_target.height + _hMaxView) {						//bottom				yPosition = -_target.height + _hMaxView;			} else {				yPosition = _target.y + speed;													//Scroll			}						//animatiom			//TweenLite.to(_target, .3, {y:yPosition, onStart:_mask.enableBitmapMode, onUpdate:_mask.update, onComplete:_mask.disableBitmapMode});					//Animation			TweenLite.to(_target, .3, {y:yPosition, onUpdate:_mask.update});					//Animation			TweenLite.to(roll, .3, {y:-yPosition / _ratePage, onComplete: _tweenComplete});		//Scroll Animation		}						private function drag(e:MouseEvent):void {			TweenMax.killAll();			//_mask.enableBitmapMode();						roll.alpha = 1;			track.alpha = 1;						var rect:Rectangle = new Rectangle(0,0,0,_hMaxView - roll.height)			roll.startDrag(false, rect);			addEventListener(Event.ENTER_FRAME, _inertial);			}				private function _inertial(e:Event):void {			TweenLite.to(_target, .3, {y:-roll.y * _ratePage+1, onUpdate:_mask.update});		}				private function stop(e:MouseEvent):void {			_mask.disableBitmapMode();			_tweenComplete();			roll.stopDrag();			removeEventListener(Event.ENTER_FRAME, _inertial);		}				private function trackClick(e:MouseEvent):void {			roll.alpha = 1;			track.alpha = 1;						var clickPos:Number = mouseY;														//capture the mouse position			var yPosition:Number;																//define final position						//define the scroll orientation			var orientation:int = 0;																					if (clickPos > roll.y) {				orientation = 1;			} else if (clickPos < roll.y) {				orientation = -1;			}						//boundaries			yPosition = _target.y - (_hMaxView  * orientation);						if(yPosition > 0) {																	//Top				yPosition = 0;			} else if(yPosition < -_target.height + _hMaxView) {								//bottom				yPosition = -_target.height + _hMaxView;			}						//animations			//TweenLite.to(_target, .3, {y:yPosition, onStart:_mask.enableBitmapMode, onUpdate:_mask.update, onComplete:_mask.disableBitmapMode});			TweenLite.to(_target, .3, {y:yPosition, onUpdate:_mask.update});								TweenLite.to(roll, .3, {y:- yPosition / _ratePage, onComplete: _tweenComplete});				}						private function _tweenComplete():void {			_mask.disableBitmapMode();						TweenLite.to(roll, .3, {alpha:0, delay: .6});			TweenLite.to(track, .3, {alpha:0, delay: .4});		}			}	}